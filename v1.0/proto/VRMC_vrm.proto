syntax = "proto3";
package VrmProtobuf;
import "google/protobuf/wrappers.proto";

message Meta
{
  // The name of the model
  string name = 1;

  // The version of the model
  string version = 2;

  // Authors of the model
  repeated string authors = 3;

  // An information that describes the copyright of the model
  string copyrightInformation = 4;

  // An information that describes the contact information of the author
  string contactInformation = 5;

  // References / original works of the model
  repeated string references = 6;

  // Third party licenses of the model, if required. You can use line breaks
  string thirdPartyLicenses = 7;

  // The index to access the thumbnail image of the avatar model in gltf.images. The texture resolution of 1024x1024 is recommended. It must be square. Preferable resolution is 1024 x 1024. This is for the application to use as an icon.
  google.protobuf.Int32Value thumbnailImage = 8;

  enum AvatarPermissionType {
    OnlyAuthor = 0;
    ExplicitlyLicensedPerson = 1;
    Everyone = 2;
  }

  // A person who can perform with this avatars
  AvatarPermissionType avatarPermission = 9;

  // Perform violent acts with this avatar
  google.protobuf.BoolValue violentUsage = 10;

  // Perform sexual acts with this avatar
  google.protobuf.BoolValue sexualUsage = 11;

  // 
  google.protobuf.BoolValue gameUsage = 12;

  enum CommercialUsageType {
    PersonalNonCommercialNonProfit = 0;
    PersonalNonCommercialProfit = 1;
    PersonalCommercial = 2;
    Corporation = 3;
  }

  // Commercial use
  CommercialUsageType commercialUsage = 13;

  // 
  google.protobuf.BoolValue politicalOrReligiousUsage = 14;

  // Describe the URL links of license with regard to other permissions
  string otherPermissionUrl = 15;

  enum CreditNotationType {
    Required = 0;
    Unnecessary = 1;
    Abandoned = 2;
  }

  // 
  CreditNotationType creditNotation = 16;

  // 
  google.protobuf.BoolValue allowRedistribution = 17;

  enum ModifyType {
    Prohibited = 0;
    Inherited = 1;
    NotInherited = 2;
  }

  // 
  ModifyType modify = 18;

  // Describe the URL links of other license
  string otherLicenseUrl = 19;
}
message HumanBone
{
  // Represents a single glTF node tied to this humanBone.
  google.protobuf.Int32Value node = 1;
}
message HumanBones
{
  // Represents a single bone of a Humanoid.
  HumanBone hips = 1;

  // Represents a single bone of a Humanoid.
  HumanBone spine = 2;

  // Represents a single bone of a Humanoid.
  HumanBone chest = 3;

  // Represents a single bone of a Humanoid.
  HumanBone upperChest = 4;

  // Represents a single bone of a Humanoid.
  HumanBone neck = 5;

  // Represents a single bone of a Humanoid.
  HumanBone head = 6;

  // Represents a single bone of a Humanoid.
  HumanBone leftEye = 7;

  // Represents a single bone of a Humanoid.
  HumanBone rightEye = 8;

  // Represents a single bone of a Humanoid.
  HumanBone jaw = 9;

  // Represents a single bone of a Humanoid.
  HumanBone leftUpperLeg = 10;

  // Represents a single bone of a Humanoid.
  HumanBone leftLowerLeg = 11;

  // Represents a single bone of a Humanoid.
  HumanBone leftFoot = 12;

  // Represents a single bone of a Humanoid.
  HumanBone leftToes = 13;

  // Represents a single bone of a Humanoid.
  HumanBone rightUpperLeg = 14;

  // Represents a single bone of a Humanoid.
  HumanBone rightLowerLeg = 15;

  // Represents a single bone of a Humanoid.
  HumanBone rightFoot = 16;

  // Represents a single bone of a Humanoid.
  HumanBone rightToes = 17;

  // Represents a single bone of a Humanoid.
  HumanBone leftShoulder = 18;

  // Represents a single bone of a Humanoid.
  HumanBone leftUpperArm = 19;

  // Represents a single bone of a Humanoid.
  HumanBone leftLowerArm = 20;

  // Represents a single bone of a Humanoid.
  HumanBone leftHand = 21;

  // Represents a single bone of a Humanoid.
  HumanBone rightShoulder = 22;

  // Represents a single bone of a Humanoid.
  HumanBone rightUpperArm = 23;

  // Represents a single bone of a Humanoid.
  HumanBone rightLowerArm = 24;

  // Represents a single bone of a Humanoid.
  HumanBone rightHand = 25;

  // Represents a single bone of a Humanoid.
  HumanBone leftThumbProximal = 26;

  // Represents a single bone of a Humanoid.
  HumanBone leftThumbIntermediate = 27;

  // Represents a single bone of a Humanoid.
  HumanBone leftThumbDistal = 28;

  // Represents a single bone of a Humanoid.
  HumanBone leftIndexProximal = 29;

  // Represents a single bone of a Humanoid.
  HumanBone leftIndexIntermediate = 30;

  // Represents a single bone of a Humanoid.
  HumanBone leftIndexDistal = 31;

  // Represents a single bone of a Humanoid.
  HumanBone leftMiddleProximal = 32;

  // Represents a single bone of a Humanoid.
  HumanBone leftMiddleIntermediate = 33;

  // Represents a single bone of a Humanoid.
  HumanBone leftMiddleDistal = 34;

  // Represents a single bone of a Humanoid.
  HumanBone leftRingProximal = 35;

  // Represents a single bone of a Humanoid.
  HumanBone leftRingIntermediate = 36;

  // Represents a single bone of a Humanoid.
  HumanBone leftRingDistal = 37;

  // Represents a single bone of a Humanoid.
  HumanBone leftLittleProximal = 38;

  // Represents a single bone of a Humanoid.
  HumanBone leftLittleIntermediate = 39;

  // Represents a single bone of a Humanoid.
  HumanBone leftLittleDistal = 40;

  // Represents a single bone of a Humanoid.
  HumanBone rightThumbProximal = 41;

  // Represents a single bone of a Humanoid.
  HumanBone rightThumbIntermediate = 42;

  // Represents a single bone of a Humanoid.
  HumanBone rightThumbDistal = 43;

  // Represents a single bone of a Humanoid.
  HumanBone rightIndexProximal = 44;

  // Represents a single bone of a Humanoid.
  HumanBone rightIndexIntermediate = 45;

  // Represents a single bone of a Humanoid.
  HumanBone rightIndexDistal = 46;

  // Represents a single bone of a Humanoid.
  HumanBone rightMiddleProximal = 47;

  // Represents a single bone of a Humanoid.
  HumanBone rightMiddleIntermediate = 48;

  // Represents a single bone of a Humanoid.
  HumanBone rightMiddleDistal = 49;

  // Represents a single bone of a Humanoid.
  HumanBone rightRingProximal = 50;

  // Represents a single bone of a Humanoid.
  HumanBone rightRingIntermediate = 51;

  // Represents a single bone of a Humanoid.
  HumanBone rightRingDistal = 52;

  // Represents a single bone of a Humanoid.
  HumanBone rightLittleProximal = 53;

  // Represents a single bone of a Humanoid.
  HumanBone rightLittleIntermediate = 54;

  // Represents a single bone of a Humanoid.
  HumanBone rightLittleDistal = 55;
}
message Humanoid
{
  // Represents a set of humanBones of a humanoid.
  HumanBones humanBones = 1;
}
message MeshAnnotation
{
  // The index of the node that attached to target mesh.
  google.protobuf.Int32Value node = 1;

  enum FirstPersonType {
    auto = 0;
    both = 1;
    thirdPersonOnly = 2;
    firstPersonOnly = 3;
  }

  // How the camera interprets the mesh.
  FirstPersonType firstPersonType = 2;
}
message FirstPerson
{
  // Mesh rendering annotation for cameras. 'required' :   [  'mesh' ,  'firstPersonType'  ]
  repeated MeshAnnotation meshAnnotations = 1;
}
message LookAtRangeMap
{
  // Yaw and pitch angles  ( degrees )  between the head bone forward vector and the eye gaze LookAt vector
  google.protobuf.FloatValue inputMaxValue = 1;

  // Degree for LookAtType.bone ,  Weight for LookAtType.blendShape
  google.protobuf.FloatValue outputScale = 2;
}
message LookAt
{
  // The origin of LookAt. Position offset from the head bone
  repeated float offsetFromHeadBone = 1;

  enum LookAtType {
    bone = 0;
    blendShape = 1;
  }

  // 
  LookAtType lookAtType = 2;

  // Horizontal inward movement. The left eye moves right. The right eye moves left.
  LookAtRangeMap lookAtHorizontalInner = 3;

  // Horizontal outward movement. The left eye moves left. The right eye moves right.
  LookAtRangeMap lookAtHorizontalOuter = 4;

  // Vertical downward movement. Both eyes move upwards
  LookAtRangeMap lookAtVerticalDown = 5;

  // Vertical upward movement. Both eyes move downwards
  LookAtRangeMap lookAtVerticalUp = 6;
}
message MorphTargetBind
{
  // The index of the node that attached to target mesh.
  google.protobuf.Int32Value node = 1;

  // The index of the morph target in the mesh.
  google.protobuf.Int32Value index = 2;

  // The weight value of target morph target.
  google.protobuf.FloatValue weight = 3;
}
message MaterialColorBind
{
  // target material
  google.protobuf.Int32Value material = 1;

  enum MaterialColorType {
    color = 0;
    emissionColor = 1;
    shadeColor = 2;
    rimColor = 3;
    outlineColor = 4;
  }

  // 
  MaterialColorType type = 2;

  // target color
  repeated float targetValue = 3;
}
message TextureTransformBind
{
  // target material
  google.protobuf.Int32Value material = 1;

  // uv scaling for TEXCOORD_0
  repeated float scaling = 2;

  // uv offset for TEXCOORD_0
  repeated float offset = 3;
}
message Expression
{
  // Use only if the preset is custom. Unique within the model
  string name = 1;

  enum ExpressionPreset {
    custom = 0;
    aa = 1;
    ih = 2;
    ou = 3;
    ee = 4;
    oh = 5;
    blink = 6;
    joy = 7;
    angry = 8;
    sorrow = 9;
    fun = 10;
    lookUp = 11;
    lookDown = 12;
    lookLeft = 13;
    lookRight = 14;
    blinkLeft = 15;
    blinkRight = 16;
    neutral = 17;
  }

  // Functions of Expression
  ExpressionPreset preset = 2;

  // Specify a morph target. 'required' :   [  'mesh' ,  'index' ,  'weight'  ]
  repeated MorphTargetBind morphTargetBinds = 3;

  // Material color animation references. 'required' :   [  'material' ,  'type' ,  'targetValue'  ]
  repeated MaterialColorBind materialColorBinds = 4;

  // Texture transform animation references
  repeated TextureTransformBind textureTransformBinds = 5;

  // Interpret non-zero values as 1
  google.protobuf.BoolValue isBinary = 6;

  // Disable Blink when this Expression is enabled
  google.protobuf.BoolValue ignoreBlink = 7;

  // Disable LookAt when this Expression is enabled
  google.protobuf.BoolValue ignoreLookAt = 8;

  // Disable Mouth when this Expression is enabled
  google.protobuf.BoolValue ignoreMouth = 9;
}
message VRMCVrm
{
  // 
  string specVersion = 1;

  // 
  Meta meta = 2;

  // Correspondence between nodes and human bones
  Humanoid humanoid = 3;

  // First-person perspective settings
  FirstPerson firstPerson = 4;

  // Eye gaze control
  LookAt lookAt = 5;

  // Definitions of expressions
  repeated Expression expressions = 6;
}
